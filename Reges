Regular expressions
We will use the apache log file from last lecture.
1) Write a regular expression that matches:
a) IP address of the remote host
b) remote logname: is usually -, unless the mod_ident module is installed.
c) remote user (in the log file it is -)
d) time: the timestamp of when the request was received.
e) first line of request: this usually includes the request method, the request URL,
and the protocol definition.
f) status of the request
g) bytes sent: note that the bytes sent can be either a number or represented by -, if no bytes are sent (bytes sent=0)
import re
file_con=open('access_HIOA.txt','r')
a=file_con.readlines()
regex= r'\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}\s\-\s\-\s\[\d{1,2}\/\w{1,3}\/\d{1,4}\:\d{1,2}\:\d{1,2}\:\d{1,2}\s\+\d{1,4}\]\s\"(.*)\"\s\d{1,3}\s\d{1,3}'
file_match=re.compile(regex,re.VERBOSE)
for l in a:
        match=file_match.search(l).group()
        print (match)
2) Currently, the only fields we are interested in are these 3 fields: status of the request, the IP address remote host and the bytes sent. We will use the method called groupdict( ) from RE in order to retrieve these three fields. Note that you will do a small modification on the regular expression written in 1) in order to be able to use groupdict( ) to retrieve these fields.
import re
file_con=open('access_HIOA.txt','r')
a=file_con.readlines()
regex= r'(?P<remotehost>\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})\s\-\s\-\s\[\d{1,2}\/\w{1,3}\/\d{1,4}\:\d{1,2}\:\d{1,2}\:\d{1,2}\s\+\d{1,4}\]\s\"(.*)\"\s(?P<requeststatus>\d{1,3})\s(?P<bytesent>\d{1,3})'
file_mtch=re.compile(regex,re.VERBOSE)
for l in a:
    mtch=file_mtch.search(l)
    if mtch:
       ipaddrs=mtch.groupdict()
       print (ipaddrs['remotehost']+ " " +ipaddrs['requeststatus']+ " " +ipaddrs['bytesent'])
3) Write a function that takes a file object, iterates through all the lines in the file, and for each line, stores the three fields (status of the request, the IP address remote host and the bytes sent) in a dictionary. Here an example of one entry in the dictionary: {'status': '404', 'remote_host': '203.172.141.59', 'bytes_sent': '504'}
import re
def regex_function():
    file_con=open('access_HIOA.txt','r')
    a=file_con.readlines()
    regex= r'?P<remotehost>\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})\s\-\s\-\s\[\d{1,2}\/\w{1,3}\/\d{1,4}\:\d{1,2}\:\d{1,2}\:\d{1,2}\s\+\d{1,4}\]\s\"(.*)\"\s(?P<requeststatus>\d{1,3})\s(?P<bytesent>\d{1,3}'
    mtch=re.compile(regex,re.VERBOSE)
    for l in a:
        match=file_con.search(l)
        if mtch:
          ipadd=mtch.groupdict()
          print (ipadd['requeststatus']+ " " +ipadd['remotehost']+ " " +ipadd['bytesent'])

    file_con.close()
mlt=regex_function()
Data Persistence:
4) We are now interested in finding out for each remote host ip address the sum of the bytes sent.
Hint: You can create another dictionary whose keys are: ip @ and values: a list of the bytes sent)
Eksp: {'107.170.31.150': [567], '110.168.97.242': [504, 508, 501, 505],
'210.41.193.90': [504, 508, 501, 505], etc…….}
Then sum up the element of the list to find the sum of bytes sent

import re
import collections
file_con=open('access_HIOA.txt','r')
a=file_con.readlines()
regex= r'(?P<remotehost>\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})\s\-\s\-\s\[\d{1,2}\/\w{1,3}\/\d{1,4}\:\d{1,2}\:\d{1,2}\:\d{1,2}\s\+\d{1,4}\]\s\"(.*)\"\s(?P<requeststatus>\d{1,3})\s(?P<bytesent>\d{1,3})'
mtch=re.compile(regex,re.VERBOSE)
dictionary=collections.defaultdict(list)
for l in a:
    ipaddmach=mtch.search(l)
    if ipaddmach:
       ip1=ipaddmach.groupdict()
       ipaddress=ip1['remotehost']
       bytesent=int(ip1['bytesent'])
       dictionary[ipaddress].append(bytesent)
for key,values in dictionary.items():
   print (key+ "---" +str(values))
   mysum={}
for key,listval in dictionary.items():
   s=0
   for v in listval:
      s+=v
      mysum[key]=s
for key,values in mysum.items():
      print (key+ "---" +str(values))

5) Now we will use the shelve module to store data about each unique IP address remote host and the sum of bytes transferred to it in a file called access.s
import re
import shelve
Dbs=shelve.open('access.s')
file_con=open('access_HIOA.txt','r')
a=file_con.readlines()
regex= r'(?P<remotehost>\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})\s\-\s\-\s\[\d{1,2}\/\w{1,3}\/\d{1,4}\:\d{1,2}\:\d{1,2}\:\d{1,2}\s\+\d{1,4}\]\s\"(.*)\"\s(?P<requeststatus>\d{1,3})\s(?P<bytesent>\d{1,3})'
mtch=re.compile(regex,re.VERBOSE)
dictionary=[]
for l in a:
    ipadd_match=file_con.search(l)
    if ipadd_match:
      ip1=ipadd_match.groupdict()
      ip_address=ip1['remotehost']
      bytesent=int(ip1['bytesent'])
      if  ip_address in dictionary:
         Dbs[ip_address]=Dbs[ip_address]+bytesent
      else:
         Dbs[ip_address]=bytesent
         dictionary.append(ip_address)
Dbs.sync()
for ip_address,byte in Dbs.items():
   print (ip_address + "---" +str(byte))
Dbs.close()

Matplotlib and plotting graphs: 
6) We will plot some graph using Matplotlib: 
a) Make a bar chart that plots the data from access.s. In the x axis, write the Ip @ of the remote hosts, and in the y axis, the sum of the bytes transferred to it. Save the bar chart as image
import shelve
import numpy as np
import matplotlib.pyplot as plt
# Open access.s file to get ip and bytes sent
database = shelve.open('access.s')
y = database.values()
x = range(0, len(y))
width = 0.75
plt.bar( x, y, width, color="magenta" )
plt.ylabel('Bytes sum')
plt.xlabel('IP Address')
plt.title("IP Address & Bytes Send")
plt.savefig("bar_chart.png", dpi=200)
plt.show()
b) Make a pie chart that plots the data from access.s and save it as image.
__author__ = 'bikram'
#!/usr/bin/python

import shelve
import numpy as np
import matplotlib.pyplot as plt
# Open file to get ip and bytes sent
database = shelve.open('access.s')
faces = database.values()
x = database.keys()
plt.pie(faces, labels=x, autopct='%.0f%%', shadow=False, radius= 1 )
plt.title("IP Address & Bytes Send")
plt.savefig("pie_chart.png", dpi=200)
plt.show()

Displaying requests by country:
7) In this last question, we will use a use a module called GeoIP to display the number of requests by countries. (Note that this is different from the number of remote hosts by country, because a host can issue more than one request) The final results should be a list similar to this
Canada 11
Turkey 12
Norway 1646
Etc…

__author__ = 'bikram'
#!/usr/bin/python

import GeoIP
from collections import Counter

MyGeoIP = GeoIP.new(GeoIP.GEOIP_MEMORY_CACHE)
# opening the file containing the ips
logs = open("access_HIOA.txt", "r")
# Reading lines
lines = logs.readlines()
logs.close()
array_IP = []
# Extracting the IP value from the lines
for line in lines:
    ip = line.split()[0]
    array_IP.append(ip)
## calling the geoip function for each ip and appending the country name to an array
country_usedip = {}
country_list = []
for ip in array_IP:
   country_list.append(MyGeoIP.country_name_by_addr(ip))
# add the country and number of ip used from that country to the dictionary
for country in country_list:
    country_usedip[country] = country_usedip.get(country, 0) + 1
# print the country and ip count
for name, count in country_usedip.items():
    print (name, " :: ", count)


